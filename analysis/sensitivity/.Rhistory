gp.all$grobs[head(xlabs, -1)] <- lapply(gp.all$grobs[head(xlabs, -1)], function(x) x <- zeroGrob())
# remove panels from all but the first plot
panels <- grep("panel", gp.all$layout$name)
top <- unique(gp.all$layout$t[panels])[-1]
gp.all <- gp.all[-(top-1),]
# adjust heights between facet rows
#gp.all$heights[c(7,8,13,14,19,20,25,26,5,11,17,23)] <- unit(0, "pt")
gp.all$heights[c(11,12,21,22,31,32,41,42,8,18,28,38)] <- unit(0, "pt")
gp.all$heights[c(9,19,29,39)] <- unit(5.5, "pt")
# legend (generalized, manual)
df <- data.frame(
x = runif(100),
y = runif(100),
z = runif(100)
)
leg1 <- ggplot(df, aes(x, y, colour=z)) +
geom_point(aes(colour=z)) +
scale_colour_gradientn("Relative parameter value for conditional density functions   ", breaks=c(.01,.5,.99), labels=c("small", "medium", "large"), colours = rainbow(10), limits=c(0,1)) +
#scale_colour_distiller("Relative parameter value for conditional density functions   ", palette = "Spectral", direction = 1, breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
#scale_colour_gradient2("Relative parameter value for conditional density functions   ", low="green", high="blue", breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
guides(colour = guide_colourbar(title.theme = element_text(size=18, angle = 0), title.hjust = 0, title.vjust = .8,
label.theme = element_text(size=15, angle=0),
barwidth = 15, barheight = 1.5, ticks = F, direction="horizontal")) +
theme(legend.position = "bottom", legend.justification=c(.1,0), legend.margin = margin(t=15, b=5))
leg2 <- ggplot(df, aes(x, y, colour=1)) +
geom_line() +
scale_colour_continuous("Unconditional density function") +
guides(colour = guide_legend(label.theme = element_blank(), title.theme = element_text(size=18, angle = 0),
override.aes = list(linetype=1, colour="black", size=1.2))) +
theme(legend.position = "bottom", legend.justification=c(0,0), legend.margin = margin(t=15, b=20),
legend.key = element_rect(fill="white"), legend.key.width = unit(30, "pt"))
# draw plot
pdf("test2.pdf", width=18, height=9)
lay <- rbind(c(1,1),
c(2,3))
grid.arrange(gp.all, g_legend(leg1), g_legend(leg2), layout_matrix=lay, heights=c(.9,.1), widths=c(.6,.4))
dev.off()
plot_PAWN_ecdf
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
library(grid)
library(gridExtra)
library(doMC)
registerDoMC(cores=8)
#setwd("/mnt/scratch/users/stud06/tpilz/LUMP_paper/analysis/sensitivity/")
setwd("/home/tobias/Promotion/Paper/lumpR/analysis/sensitivity/")
# R object with data.frame of hydrological indices per realisation
dat_file <- "./hydIndices_realisations.Rdata"
# how discretisation parameters shall be named in the plot
par_labs <- c(s="SUB_thresh", eha="EHA_thresh", lunum="LU_no", tc="TC_no", luatts="LU_atts")
# which indices/parameters to use and in which order facets should appear (for original names see raw data)
ind_sel <- c("rc", "p_z", "m_h", "fdc_s", "f_l", "f_h", "r_r", "r_f")
par_sel <- c("SUB_thresh", "EHA_thresh", "LU_no", "LU_atts", "TC_no")
# how indices shall be named in the plot; formatting as with expression() in R (or change label_parsed, see R help)
ind_labs <- as_labeller(c(rc="RR", m_h="Q[avmax]", p_z="P[flow]", f_h="f[high]", f_l="f[low]", r_r="RC[rise]", r_f="RC[fall]", fdc_s="SFDC"),
label_parsed)
# same as ind_labs but with units
ind_labs_units <- as_labeller(c(rc="RR~('%')", m_h="Q[avmax]~(m^3~s^-1)", p_z="P[flow]~('%')", f_h="f[high]~(year^-1)", f_l="f[low]~(year^-1)", r_r="atop(RC[rise],(m^3~s^-1~day^-1))", r_f="atop(RC[fall],(m^3~s^-1~day^-1))", fdc_s="SFDC~('-')",
SUB_thresh="SUB_thresh", EHA_thresh="EHA_thresh", LU_no="LU_no", TC_no="TC_no", LU_atts="LU_atts"),
label_parsed)
# PAWN plots
plot_PAWN_KS_pars <- "sensitivity_PAWN_KS_pars.png"
plot_PAWN_bars <- "sensitivity_PAWN_bars.png"
plot_PAWN_ecdf <- "sensitivity_PAWN_ecdf.pdf"
# Variance-based SA plots (NOT IN PAPER)
plot_variance_bar <- "sensitivity_variance_barplots.png"
plot_variance_pattern <- "sensitivity_variance_tiles.png"
### UTILI
### UTILITY FUNCTION ###
# function to extract a legend from a ggplot for separate plotting
# obtained from: http://stackoverflow.com/questions/11883844/inserting-a-table-under-the-legend-in-a-ggplot2-histogram
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
### CALCULATIONS ###
# get data
load(dat_file)
# explicitly list input factors (i.e. parameters) and realisations
dat_ind <- ind_df %>%
filter(index %in% ind_sel) %>%
mutate(index = factor(index, levels=ind_sel)) %>%
separate(realisation, c("p1", "p2", "s", "eha", "lunum", "luatts", "tc"), sep="_", extra="merge") %>%
select(-p1,-p2)
dat_ind[,c("s", "eha", "lunum", "luatts", "tc")] <- lapply(dat_ind[,c("s", "eha", "lunum", "luatts", "tc")], function(x) as.numeric(gsub("[a-z]", "", x)))
params <- names(select(dat_ind, -value))
### PAWN density-based method (Pianosi & Wagener, 2015) ###
# calculation of conditional and unconditional empirical cumulated density values
dat_sens <- dat_ind %>%
# apply over all indices
ddply("index", .parallel=T, function(x){
# apply over parameters to calculate condition cdfs
lapply(params[-which(params == "index")], function(y){
x %>%
mutate(ecd_uncon = ecdf(value)(value), # calculate unconditional empirical cumulative densitiy values
Nu = length(value)) %>% # number of values used to estimate ecdf
# apply over parameter realisations of current parameter y
ddply(y, function(z){
z %>%
select(value, ecd_uncon, Nu) %>%
mutate(ecd = ecdf(value)(value)) %>% # calculate conditional empirical cumulative densitiy values for each parameter realisation
mutate(ecd_diff = abs(ecd - ecd_uncon)) # calculate absolute difference between conditional and unconditional cdf
})
}) %>%
rbind.fill()
}) %>%
gather("param", "param_val", one_of(params[-which(params == "index")]), na.rm=T) %>%
mutate(param = as.factor(revalue(param, replace = par_labs))) %>% # replace parameter labels
mutate(param = factor(param, levels=par_sel)) # ensure specified order of labels
# calculate Kolmogorov-Smirnoff statistic (i.e. maximum difference between conditional and unconditional ecdf)
dat_sens_ks <- dat_sens %>%
ddply(c("index", "param", "param_val"), .parallel=T, function(x){
x %>%
summarise(KS = max(ecd_diff),
Nu = mean(Nu),
Nc = length(ecd_diff))
})
# calculate mean and median of KS values and critical KS value by two-sample test with confidence level alpha = 0.05 (i.e. c(alpha) = 1.36)
dat_sens_stats <- dat_sens_ks %>%
ddply(c("index", "param"), .parallel=T, function(x) {
x %>%
summarise(KS_mean = mean(KS),
KS_med = median(KS),
Nu = mean(Nu),
Nc_mean = mean(Nc)
) %>%
mutate(KS_crit = 1.36 * sqrt( (Nu+Nc_mean) / (Nu*Nc_mean) ) ) # use Nc on average used to compute conditional CDFs)
})
# plot ecdfs
dat_plot_ecd <- dat_sens %>%
gather("ecd_type", "ecd_val", ecd_uncon, ecd)
ggplot(df, aes(x, y, colour=z)) +
geom_point(aes(colour=z)) +
#scale_colour_gradientn("Relative parameter value for conditional density functions   ", breaks=c(.01,.5,.99), labels=c("small", "medium", "large"), colours = rainbow(10), limits=c(0,1)) +
scale_colour_distiller("Relative parameter value for conditional density functions   ", palette = "Spectral", direction = 1, breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
#scale_colour_gradient2("Relative parameter value for conditional density functions   ", low="green", high="blue", breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
guides(colour = guide_colourbar(title.theme = element_text(size=18, angle = 0), title.hjust = 0, title.vjust = .8,
label.theme = element_text(size=15, angle=0),
barwidth = 15, barheight = 1.5, ticks = F, direction="horizontal")) +
theme(legend.position = "bottom", legend.justification=c(.1,0), legend.margin = margin(t=15, b=5))
ggplot(df, aes(x, y, colour=z)) +
geom_point(aes(colour=z)) +
scale_colour_gradientn("Relative parameter value for conditional density functions   ", breaks=c(.01,.5,.99), labels=c("small", "medium", "large"), colours = rainbow(10), limits=c(0,1)) +
#scale_colour_distiller("Relative parameter value for conditional density functions   ", palette = "Spectral", direction = 1, breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
#scale_colour_gradient2("Relative parameter value for conditional density functions   ", low="green", high="blue", breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
guides(colour = guide_colourbar(title.theme = element_text(size=18, angle = 0), title.hjust = 0, title.vjust = .8,
label.theme = element_text(size=15, angle=0),
barwidth = 15, barheight = 1.5, ticks = F, direction="horizontal")) +
theme(legend.position = "bottom", legend.justification=c(.1,0), legend.margin = margin(t=15, b=5))
df <- data.frame(
x = runif(100),
y = runif(100),
z = runif(100)
)
ggplot(df, aes(x, y, colour=z)) +
geom_point(aes(colour=z)) +
#scale_colour_gradientn("Relative parameter value for conditional density functions   ", breaks=c(.01,.5,.99), labels=c("small", "medium", "large"), colours = rainbow(10), limits=c(0,1)) +
scale_colour_distiller("Relative parameter value for conditional density functions   ", palette = "Spectral", direction = 1, breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
#scale_colour_gradient2("Relative parameter value for conditional density functions   ", low="green", high="blue", breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
guides(colour = guide_colourbar(title.theme = element_text(size=18, angle = 0), title.hjust = 0, title.vjust = .8,
label.theme = element_text(size=15, angle=0),
barwidth = 15, barheight = 1.5, ticks = F, direction="horizontal")) +
theme(legend.position = "bottom", legend.justification=c(.1,0), legend.margin = margin(t=15, b=5))
gp <- dat_plot_ecd %>%
dlply("param", function(x){
gp_t <- ggplot(x, aes(x=value, y=ecd_val)) +
geom_line(data = subset(x, ecd_type!="ecd_uncon"), aes(group=param_val, colour=factor(param_val))) +
geom_line(data = subset(x, ecd_type=="ecd_uncon"), colour="black") +
#scale_colour_hue(h=c(0,180)) +
scale_colour_distiller(palette = "Spectral", direction = 1) +
#scale_y_continuous(breaks = round(seq(0, 1, by = 0.5),1)) +
labs(x="Streamflow index value", y="Empirical cumulated density (-)") +
theme_bw(base_size = 18) +
theme(legend.position = "none",  strip.text.x = element_text(size = 16)) +
facet_grid(param ~ index, scale="free_x", labeller = ind_labs_units)
ggplotGrob(gp_t)
})
?factor
?levels()
str(dat_plot_ecd$param_val)
unique(dat_plot_ecd$param_val)
?ddly
?ddply
1000/30000
1000/30000 * 5
c(1000,2000,5000,10000,30000)/30000*5
c(1000,2000,5000,10000,30000)/30000
c(5,10,20,75,150,250,300)/300
c(5,10,20,75,150,250,300)/300*7
c(5,10,20,75,150,250,300)/7
c(5,10,20,75,150,250,300)/7*300
c(5,10,20,75,150,250,300)/20
c(5,10,20,75,150,250,300)/300
c(5,10,20,75,150,250,300)/300/1
1/(c(5,10,20,75,150,250,300)/300)
8/20
length(c(5,10,20,75,150,250,300))/20
c(1:7)/20
c(1:7)/7
str(dat_sens)
str(dat_plot_ecd)
head(dat_plot_ecd)
c(1,1,2,3,3,3,4,5,6,6,7,8)
bla <- c(1,1,2,3,3,3,4,5,6,6,7,8)
bla_u <- unique(bla)
bla_l <- length(bla_u)
which(bla %in% bla_u)
bla_u
bla
unique(bla)
which(bla_u %in% bla)
bla %in% bla_u
match(bla, bla_u)
bla <- c(2,3,5,5,1,4,6,8,8,2)
match(bla, bla_u)
match(bla, bla_u)/bla_l
test <- dat_sens %>%
gather("ecd_type", "ecd_val", ecd_uncon, ecd) %>%
ddply("param", function(x) {
uniques <- unique(param_val)
len <- length(uniques)
key_val <- match(param_val, uniques)/len
return(key_val)
})
test <- dat_sens %>%
gather("ecd_type", "ecd_val", ecd_uncon, ecd) %>%
ddply("param", function(x) {
uniques <- unique(x$param_val)
len <- length(x$uniques)
key_val <- match(x$param_val, uniques)/len
return(key_val)
})
str(test)
test <- dat_sens %>%
gather("ecd_type", "ecd_val", ecd_uncon, ecd) %>%
ddply("param", function(x) {
uniques <- unique(x$param_val)
len <- length(x$uniques)
key_val <- match(x$param_val, uniques)/len
return(cbind(x,key_val))
})
str(test)
str(dat_plot_ecd)
str(test)
head(test)
tail(test)
head(test[test$param=="TC_no",])
unique(test[test$param=="TC_no",]$param_val)
bla_u <- c(1:5)
len=5
test2 <- match(test[test$param=="TC_no",]$param_val, bla_u)/len
head(test2)
test2
head(test2)
str(test2)
str(test[test$param=="TC_no",]$param_val)
str(test)
test <- dat_sens %>%
gather("ecd_type", "ecd_val", ecd_uncon, ecd) %>%
ddply("param", function(x) {
#     uniques <- unique(x$param_val)
#     len <- length(x$uniques)
#     key_val <- match(x$param_val, uniques)/len
return(cbind(x,test=c(1:length(x$param_val))))
})
str(test)
test <- dat_sens %>%
gather("ecd_type", "ecd_val", ecd_uncon, ecd) %>%
ddply("param", function(x) {
uniques <- unique(x$param_val)
len <- length(uniques)
key_val <- match(x$param_val, uniques)/len
return(cbind(x,key_val))
})
str(test)
dat_plot_ecd <- dat_sens %>%
gather("ecd_type", "ecd_val", ecd_uncon, ecd) %>%
ddply("param", function(x) {
uniques <- unique(x$param_val)
len <- length(uniques)
key_val <- match(x$param_val, uniques)/len
return(cbind(x,key_val))
})
# create plot for each parameter (to get individual color scales)
gp <- dat_plot_ecd %>%
dlply("param", function(x){
gp_t <- ggplot(x, aes(x=value, y=ecd_val)) +
geom_line(data = subset(x, ecd_type!="ecd_uncon"), aes(group=param_val, colour=key_val)) +
geom_line(data = subset(x, ecd_type=="ecd_uncon"), colour="black") +
#scale_colour_hue(h=c(0,180)) +
scale_colour_distiller(palette = "Spectral", direction = 1) +
#scale_y_continuous(breaks = round(seq(0, 1, by = 0.5),1)) +
labs(x="Streamflow index value", y="Empirical cumulated density (-)") +
theme_bw(base_size = 18) +
theme(legend.position = "none",  strip.text.x = element_text(size = 16)) +
facet_grid(param ~ index, scale="free_x", labeller = ind_labs_units)
ggplotGrob(gp_t)
})
# combine all plots
gp.all <- do.call("rbind.gtable", gp)
# alterations (remove axes, reduces spaces, add legends, etc. for proper arrangement of plots)
# - push ylab of first sub plot across width of united plot
ylabs <- which(grepl("axis.title.y", sapply(gp.all$grobs, function(x) x$name)))
gp.all$layout[first(ylabs),"b"] <- gp.all$layout[last(ylabs),"b"]
# - remove ylab from all but first sub plot
gp.all$grobs[ylabs[-1]] <- lapply(gp.all$grobs[ylabs[-1]], function(x) x <- zeroGrob())
# remove bottom axes from all but the last plot (one bottom axis for every column, i.e. every index)
no_index <- length(levels(dat_plot_ecd$index))
bot_axes <- head(grep("axis-b", gp.all$layout$name), -no_index)
gp.all$grobs[bot_axes] <- lapply(gp.all$grobs[bot_axes], function(x) x <- zeroGrob())
# remove xlab from all but the last plot
xlabs <- which(grepl("axis.title.x", sapply(gp.all$grobs, function(x) x$name)))
gp.all$grobs[head(xlabs, -1)] <- lapply(gp.all$grobs[head(xlabs, -1)], function(x) x <- zeroGrob())
# remove panels from all but the first plot
panels <- grep("panel", gp.all$layout$name)
top <- unique(gp.all$layout$t[panels])[-1]
gp.all <- gp.all[-(top-1),]
# adjust heights between facet rows
#gp.all$heights[c(7,8,13,14,19,20,25,26,5,11,17,23)] <- unit(0, "pt")
gp.all$heights[c(11,12,21,22,31,32,41,42,8,18,28,38)] <- unit(0, "pt")
gp.all$heights[c(9,19,29,39)] <- unit(5.5, "pt")
# legend (generalized, manual)
df <- data.frame(
x = runif(100),
y = runif(100),
z = runif(100)
)
leg1 <- ggplot(df, aes(x, y, colour=z)) +
geom_point(aes(colour=z)) +
#scale_colour_gradientn("Relative parameter value for conditional density functions   ", breaks=c(.01,.5,.99), labels=c("small", "medium", "large"), colours = rainbow(10), limits=c(0,1)) +
scale_colour_distiller("Relative parameter value for conditional density functions   ", palette = "Spectral", direction = 1, breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
#scale_colour_gradient2("Relative parameter value for conditional density functions   ", low="green", high="blue", breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
guides(colour = guide_colourbar(title.theme = element_text(size=18, angle = 0), title.hjust = 0, title.vjust = .8,
label.theme = element_text(size=15, angle=0),
barwidth = 15, barheight = 1.5, ticks = F, direction="horizontal")) +
theme(legend.position = "bottom", legend.justification=c(.1,0), legend.margin = margin(t=15, b=5))
leg2 <- ggplot(df, aes(x, y, colour=1)) +
geom_line() +
scale_colour_continuous("Unconditional density function") +
guides(colour = guide_legend(label.theme = element_blank(), title.theme = element_text(size=18, angle = 0),
override.aes = list(linetype=1, colour="black", size=1.2))) +
theme(legend.position = "bottom", legend.justification=c(0,0), legend.margin = margin(t=15, b=20),
legend.key = element_rect(fill="white"), legend.key.width = unit(30, "pt"))
# draw plot
#pdf(plot_PAWN_ecdf, width=18, height=9)
pdf("test2.pdf", width=18, height=9)
lay <- rbind(c(1,1),
c(2,3))
grid.arrange(gp.all, g_legend(leg1), g_legend(leg2), layout_matrix=lay, heights=c(.9,.1), widths=c(.6,.4))
dev.off()
str(dat_plot_ecd)
# create plot for each parameter (to get individual color scales)
gp <- dat_plot_ecd %>%
dlply("param", function(x){
gp_t <- ggplot(x, aes(x=value, y=ecd_val)) +
geom_line(data = subset(x, ecd_type!="ecd_uncon"), aes(group=param_val, colour=key_val)) +
geom_line(data = subset(x, ecd_type=="ecd_uncon"), colour="black") +
#scale_colour_hue(h=c(0,180)) +
scale_colour_distiller(palette = "Spectral", direction = 1) +
scale_y_continuous(breaks = round(seq(0, 1, by = 0.5),1)) +
labs(x="Streamflow index value", y="Empirical cumulated density (-)") +
theme_bw(base_size = 18) +
theme(legend.position = "none",  strip.text.x = element_text(size = 16)) +
facet_grid(param ~ index, scale="free_x", labeller = ind_labs_units)
ggplotGrob(gp_t)
})
# combine all plots
gp.all <- do.call("rbind.gtable", gp)
# alterations (remove axes, reduces spaces, add legends, etc. for proper arrangement of plots)
# - push ylab of first sub plot across width of united plot
ylabs <- which(grepl("axis.title.y", sapply(gp.all$grobs, function(x) x$name)))
gp.all$layout[first(ylabs),"b"] <- gp.all$layout[last(ylabs),"b"]
# - remove ylab from all but first sub plot
gp.all$grobs[ylabs[-1]] <- lapply(gp.all$grobs[ylabs[-1]], function(x) x <- zeroGrob())
# remove bottom axes from all but the last plot (one bottom axis for every column, i.e. every index)
no_index <- length(levels(dat_plot_ecd$index))
bot_axes <- head(grep("axis-b", gp.all$layout$name), -no_index)
gp.all$grobs[bot_axes] <- lapply(gp.all$grobs[bot_axes], function(x) x <- zeroGrob())
# remove xlab from all but the last plot
xlabs <- which(grepl("axis.title.x", sapply(gp.all$grobs, function(x) x$name)))
gp.all$grobs[head(xlabs, -1)] <- lapply(gp.all$grobs[head(xlabs, -1)], function(x) x <- zeroGrob())
# remove panels from all but the first plot
panels <- grep("panel", gp.all$layout$name)
top <- unique(gp.all$layout$t[panels])[-1]
gp.all <- gp.all[-(top-1),]
# adjust heights between facet rows
#gp.all$heights[c(7,8,13,14,19,20,25,26,5,11,17,23)] <- unit(0, "pt")
gp.all$heights[c(11,12,21,22,31,32,41,42,8,18,28,38)] <- unit(0, "pt")
gp.all$heights[c(9,19,29,39)] <- unit(5.5, "pt")
# legend (generalized, manual)
df <- data.frame(
x = runif(100),
y = runif(100),
z = runif(100)
)
leg1 <- ggplot(df, aes(x, y, colour=z)) +
geom_point(aes(colour=z)) +
#scale_colour_gradientn("Relative parameter value for conditional density functions   ", breaks=c(.01,.5,.99), labels=c("small", "medium", "large"), colours = rainbow(10), limits=c(0,1)) +
scale_colour_distiller("Relative parameter value for conditional density functions   ", palette = "Spectral", direction = 1, breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
#scale_colour_gradient2("Relative parameter value for conditional density functions   ", low="green", high="blue", breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
guides(colour = guide_colourbar(title.theme = element_text(size=18, angle = 0), title.hjust = 0, title.vjust = .8,
label.theme = element_text(size=15, angle=0),
barwidth = 15, barheight = 1.5, ticks = F, direction="horizontal")) +
theme(legend.position = "bottom", legend.justification=c(.1,0), legend.margin = margin(t=15, b=5))
leg2 <- ggplot(df, aes(x, y, colour=1)) +
geom_line() +
scale_colour_continuous("Unconditional density function") +
guides(colour = guide_legend(label.theme = element_blank(), title.theme = element_text(size=18, angle = 0),
override.aes = list(linetype=1, colour="black", size=1.2))) +
theme(legend.position = "bottom", legend.justification=c(0,0), legend.margin = margin(t=15, b=20),
legend.key = element_rect(fill="white"), legend.key.width = unit(30, "pt"))
# draw plot
#pdf(plot_PAWN_ecdf, width=18, height=9)
pdf("test2.pdf", width=18, height=9)
lay <- rbind(c(1,1),
c(2,3))
grid.arrange(gp.all, g_legend(leg1), g_legend(leg2), layout_matrix=lay, heights=c(.9,.1), widths=c(.6,.4))
dev.off()
# draw plot
pdf(plot_PAWN_ecdf, width=18, height=9)
lay <- rbind(c(1,1),
c(2,3))
grid.arrange(gp.all, g_legend(leg1), g_legend(leg2), layout_matrix=lay, heights=c(.9,.1), widths=c(.6,.4))
dev.off()
ggplot(df, aes(x, y, colour=z)) +
geom_point(aes(colour=z)) +
#scale_colour_gradientn("Relative parameter value for conditional density functions   ", breaks=c(.01,.5,.99), labels=c("small", "medium", "large"), colours = rainbow(10), limits=c(0,1)) +
scale_colour_distiller("Relative parameter value for conditional density functions   ", palette = "Spectral", direction = -1, breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
#scale_colour_gradient2("Relative parameter value for conditional density functions   ", low="green", high="blue", breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
guides(colour = guide_colourbar(title.theme = element_text(size=18, angle = 0), title.hjust = 0, title.vjust = .8,
label.theme = element_text(size=15, angle=0),
barwidth = 15, barheight = 1.5, ticks = F, direction="horizontal")) +
theme(legend.position = "bottom", legend.justification=c(.1,0), legend.margin = margin(t=15, b=5))
# plot ecdfs
dat_plot_ecd <- dat_sens %>%
gather("ecd_type", "ecd_val", ecd_uncon, ecd) %>%
ddply("param", function(x) {
uniques <- unique(x$param_val)
len <- length(uniques)
key_val <- match(x$param_val, uniques)/len # calculate evenly spaced pseudo-parameter values for better colour assignment
return(cbind(x,key_val))
})
# create plot for each parameter (to get individual color scales)
gp <- dat_plot_ecd %>%
dlply("param", function(x){
gp_t <- ggplot(x, aes(x=value, y=ecd_val)) +
geom_line(data = subset(x, ecd_type!="ecd_uncon"), aes(group=param_val, colour=key_val)) +
geom_line(data = subset(x, ecd_type=="ecd_uncon"), colour="black") +
#scale_colour_hue(h=c(0,180)) +
scale_colour_distiller(palette = "Spectral", direction = -1) +
scale_y_continuous(breaks = round(seq(0, 1, by = 0.5),1)) +
labs(x="Streamflow index value", y="Empirical cumulated density (-)") +
theme_bw(base_size = 18) +
theme(legend.position = "none",  strip.text.x = element_text(size = 16)) +
facet_grid(param ~ index, scale="free_x", labeller = ind_labs_units)
ggplotGrob(gp_t)
})
# combine all plots
gp.all <- do.call("rbind.gtable", gp)
# alterations (remove axes, reduces spaces, add legends, etc. for proper arrangement of plots)
# - push ylab of first sub plot across width of united plot
ylabs <- which(grepl("axis.title.y", sapply(gp.all$grobs, function(x) x$name)))
gp.all$layout[first(ylabs),"b"] <- gp.all$layout[last(ylabs),"b"]
# - remove ylab from all but first sub plot
gp.all$grobs[ylabs[-1]] <- lapply(gp.all$grobs[ylabs[-1]], function(x) x <- zeroGrob())
# remove bottom axes from all but the last plot (one bottom axis for every column, i.e. every index)
no_index <- length(levels(dat_plot_ecd$index))
bot_axes <- head(grep("axis-b", gp.all$layout$name), -no_index)
gp.all$grobs[bot_axes] <- lapply(gp.all$grobs[bot_axes], function(x) x <- zeroGrob())
# remove xlab from all but the last plot
xlabs <- which(grepl("axis.title.x", sapply(gp.all$grobs, function(x) x$name)))
gp.all$grobs[head(xlabs, -1)] <- lapply(gp.all$grobs[head(xlabs, -1)], function(x) x <- zeroGrob())
# remove panels from all but the first plot
panels <- grep("panel", gp.all$layout$name)
top <- unique(gp.all$layout$t[panels])[-1]
gp.all <- gp.all[-(top-1),]
# adjust heights between facet rows
#gp.all$heights[c(7,8,13,14,19,20,25,26,5,11,17,23)] <- unit(0, "pt")
gp.all$heights[c(11,12,21,22,31,32,41,42,8,18,28,38)] <- unit(0, "pt")
gp.all$heights[c(9,19,29,39)] <- unit(5.5, "pt")
# legend (generalized, manual)
df <- data.frame(
x = runif(100),
y = runif(100),
z = runif(100)
)
leg1 <- ggplot(df, aes(x, y, colour=z)) +
geom_point(aes(colour=z)) +
#scale_colour_gradientn("Relative parameter value for conditional density functions   ", breaks=c(.01,.5,.99), labels=c("small", "medium", "large"), colours = rainbow(10), limits=c(0,1)) +
scale_colour_distiller("Relative parameter value for conditional density functions   ", palette = "Spectral", direction = -1, breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
#scale_colour_gradient2("Relative parameter value for conditional density functions   ", low="green", high="blue", breaks=c(.05,.5,.95), labels=c("small", "medium", "large"), limits=c(0,1)) +
guides(colour = guide_colourbar(title.theme = element_text(size=18, angle = 0), title.hjust = 0, title.vjust = .8,
label.theme = element_text(size=15, angle=0),
barwidth = 15, barheight = 1.5, ticks = F, direction="horizontal")) +
theme(legend.position = "bottom", legend.justification=c(.1,0), legend.margin = margin(t=15, b=5))
leg2 <- ggplot(df, aes(x, y, colour=1)) +
geom_line() +
scale_colour_continuous("Unconditional density function") +
guides(colour = guide_legend(label.theme = element_blank(), title.theme = element_text(size=18, angle = 0),
override.aes = list(linetype=1, colour="black", size=1.2))) +
theme(legend.position = "bottom", legend.justification=c(0,0), legend.margin = margin(t=15, b=20),
legend.key = element_rect(fill="white"), legend.key.width = unit(30, "pt"))
# draw plot
pdf(plot_PAWN_ecdf, width=18, height=9)
lay <- rbind(c(1,1),
c(2,3))
grid.arrange(gp.all, g_legend(leg1), g_legend(leg2), layout_matrix=lay, heights=c(.9,.1), widths=c(.6,.4))
dev.off()
